managed implementation in class zbp_i_tr_travel unique;
strict ( 2 );
//Add DRAFT feature at BO level
with draft;
define behavior for yi_tr_travel alias Travel
//Make the behaviour pool/Imlementation for travel
implementation in class zbp_i_tr_travel unique
persistent table /dmo/travel_m
lock master
//Mandatory to use Total ETag
total etag LastChangedAt
authorization master ( instance )
//Specify the DRAFT Table- Will cerated by teh RAP Framework
draft table ytr_d_travel
etag master LastChangedAt
early numbering
with additional save
{
  create(precheck);
  update(precheck);
  delete;
//Static Feaature control
field (readonly) TravelId, CreatedBy, CreatedAt, LastChangedBy, LastChangedAt, TotalPrice;
//field (mandatory:create) AgencyId, CustomerId, BeginDate, EndDate, OverallStatus, BookingFee, CurrencyCode;

//Dynamic Feature control
//Add DRAFT also for booking
  association _Booking { create(features : instance); with draft;}
 association _Attachment { create; with draft;}
//Its piece of code which is intended to be only
//Consumed with in our RAP Bo
internal action recalctotalprice;
//Define determination to execut the code when
//booking fee or currency code changes so we calc total price
determination calculateTotalPrice on modify {
                           create; field BookingFee, CurrencyCode; }

//Checking custom business object rules(Validations)
validation validateHeaderData on save { create; field CustomerId, BeginDate, EndDate; }

//Create a new determine action
determine action validationCustomer { validation validateHeaderData; }

//Adding side-effect which inform RAP to reload teh total price if the booking fee changed
//on the frobtend
side effects {
field BookingFee affects field TotalPrice;
determine action validationCustomer executed on field CustomerId affects messages;
}

//Adding DRAFT eefects
draft determine action Prepare;
draft action Edit;
draft action Resume;
draft action Activate;
draft action Discard;

//Data Actions using factoty action to create new instance of BO
factory action copyTravel[1];

//Non-Facory action which will change state of the BO instance
action (features : instance) acceptTravel result[1] $self;
action (features : instance) rejecttTravel result[1] $self;

  mapping for /dmo/travel_m{
  TravelId = travel_id;
  AgencyId = agency_id;
  CustomerId = customer_id;
  BeginDate = begin_date;
  EndDate = end_date;
  TotalPrice = total_price;
  BookingFee = booking_fee;
  CurrencyCode = currency_code;
  Description = description;
  OverallStatus = overall_status;
  CreatedBy = created_by;
  LastChangedBy = last_changed_by;
  CreatedAt = created_at;
  LastChangedAt = last_changed_at;
}
}

define behavior for yi_tr_booking alias Booking
//Make the behaviour pool/Imlementation for booking
implementation in class zbp_i_tr_booking unique
persistent table /dmo/booking_m
//how the RAP should handle teh locks - If a travel request is locked
//the other users cannot edit the childs -like bookings and supplements
lock dependent by _Travel
authorization dependent by _Travel
//Specify the DRAFT Table- Will cerated by teh RAP Framework
draft table ytr_d_booking
//COntrolling the concurency
etag master LastChangedAt
early numbering
{
  update;
  delete;

//Static Feaature control
  field ( readonly ) TravelId, BookingId;
  field (mandatory) CarrierId, ConnectionId, FlightDate, BookingStatus;
  association _Travel {with draft;}
  //We have to assure that child entity also managed with draft
  association _BookSuppl { create; with draft;}

//add determination for the chnage in booking also
determination calculateTotalPrice on modify {
                           field FlightPrice, CurrencyCode; }

//Adding side-effect which inform RAP to reload teh total price if the booking fee changed
//on the frobtend
side effects {
field FlightPrice affects field _Travel.TotalPrice;
}

mapping for /dmo/booking_m{
TravelId = travel_id;
BookingId = booking_id;
BookingDate = booking_date;
CustomerId = customer_id;
CarrierId = carrier_id;
ConnectionId = connection_id;
FlightDate = flight_date;
FlightPrice = flight_price;
CurrencyCode = currency_code;
BookingStatus = booking_status;
LastChangedAt = last_changed_at;
}

}


define behavior for yi_tr_booksuppl alias BookingSuppl
//Make the behaviour pool/Imlementation for BookingSuppl
implementation in class zbp_i_tr_booksuppl unique
persistent table /dmo/booksuppl_m
lock dependent by _Travel
authorization dependent by _Travel
//Specify the DRAFT Table- Will cerated by teh RAP Framework
draft table ytr_d_booksuppl
etag master LastChangedAt
early numbering
{

  update;
  delete;
  field ( readonly ) TravelId, BookingId, BookingSupplementId;
  field (mandatory) price, SupplementId;
  association _Travel {with draft;}
  association _Booking {with draft;}

 mapping for  /dmo/booksuppl_m{
 TravelId = travel_id;
 BookingId = booking_id;
 BookingSupplementId = booking_supplement_id;
 SupplementId = supplement_id;
 Price = price;
 CurrencyCode = currency_code;
 LastChangedAt = last_changed_at;
 }
}

define behavior for YI_TR_ATTACHMENT alias Attachment
//Make the behaviour pool/Imlementation for booking
implementation in class zbp_i_tr_attachment unique
persistent table ytr_attachment
//how the RAP should handle teh locks - If a travel request is locked
//the other users cannot edit the childs -like bookings and supplements
lock dependent by _Travel
authorization dependent by _Travel
//Specify the DRAFT Table- Will cerated by teh RAP Framework
draft table ytr_d_attachment
//COntrolling the concurency
etag master LastChangedAt

{
  update;
  delete;

//Static Feaature control
  field (numbering : managed) Id;
  field ( readonly ) TravelId, Id;

  association _Travel {with draft;}

mapping for YTR_ATTACHMENT{
 TravelId = travel_id;
 Id = Id;
 Attachment = Attachment;
 Filename = Filename;
 Filetype = Filetype;
 Memo = memo;
 LastChangedAt = local_chnaged_at;
 LocalCreatedAt = local_created_at;
 LocalCreatedBy = local_created_by;
 LocalLastChangedAt = local_last_changed_at;
 LocalLastChangedBy = local_last_changed_by;
}

}